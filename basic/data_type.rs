// 数据类型
fn main() {
    // rust是一门静态语言，编译阶段需要明确所有变量的类型。当有多种可能时，必须添加一个类型注释，例如这里的i32
    // let guess: i32 = "42".parse().expect("test");
    // println!("{}", guess);

    // 标量类型表示单个值。Rust有四种主要的标量类型：整数、浮点数、布尔和字符。

    // 整数分为有符号和无符号两种，例如之前的i32就是有符号32位整数，u32就是无符号32位整数，整数类型默认为i32
    // let i: i32 = 123;

    // 浮点数有两种类型f32, f64，默认使用f64，表64位浮点数
    // let i = 1.232445;

    // 布尔和别的语言一样，false和true

    // 字符使用char类型，在rust中区别字符和字符串类型，字符使用单引号，而字符串使用双引号
    // let i: char = 'a';

    // 数字运算，整数得到的也是整数，如果需要拿到浮点数需要换成浮点数运算
    // let i = 4 / 3;
    // println!("{}", i); // 1
    // let i = 4.0 / 3.0;
    // println!("{}", i); // 1.3333333333333333

    // 复合类型可以将多个值放在一个类型中。Rust有两个原生的复合类型：元组和数组。

    // 元组是将具有各种类型的多个值组合到一个复合类型中的通用方法。元组有固定的长度：一旦声明，它们的大小就不能增长或收缩。
    // 元组的解析可以采用类JavaScript的解构方式
    // let tup = (500, 6.4, 1);
    // let (x, y, z) = tup;
    // println!("x is: {}", x);
    // println!("y is: {}", y);
    // println!("z is: {}", z);
    // 也可以使用.来解析
    // println!("x is: {}", tup.0);

    // 数组是具有相同类型的元素的集合。数组的大小是固定的，一旦声明，它们的长度永远不会改变。
    // let a: [i32; 5] = [1, 2, 3, 4, 5];
    // 也可以初始化一个数组，让每个元素都包含相同的值
    // let a = [3; 5];
    // 数组的访问与常规语言类似，使用[index]访问且也不能超过数组长度
    // println!("{}", a[0]);
}
